import time
import google_colab_selenium as gs
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.action_chains import ActionChains

from docx import Document
from docx.shared import Inches
from docx.oxml.ns import qn
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
import requests
from io import BytesIO
import re

import json


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
options = Options()
options.add_argument("user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36")
options.add_argument("--headless")  # –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
options.add_argument("--window-size=1920,1080")  # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
options.add_argument("--disable-infobars")  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
options.add_argument("--disable-popup-blocking")  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
options.add_argument("--ignore-certificate-errors")  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ SSL
options.add_argument("--incognito")  # –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ-—Ä–µ–∂–∏–º
options.add_argument("--disable-blink-features=AutomationControlled")  # –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ Selenium

# –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
browser = gs.Chrome(options=options)
driver = gs.Chrome()
driver.get("https://neofamily.ru/biologiya/task-bank?ysclid=m8y9vc3bei55989583&sort_by=id&sort_order=desc&sections=33")
time.sleep(3)

# –ø—Ä–æ–º–æ—Ç–∫–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
last_height = driver.execute_script("return document.body.scrollHeight")
while True:
    ActionChains(driver).move_to_element(driver.find_element(By.TAG_NAME, "footer")).perform()
    time.sleep(2)
    new_height = driver.execute_script("return document.body.scrollHeight")
    if new_height == last_height:
        break
    last_height = new_height

# # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
# task_count = len(driver.find_elements(By.XPATH, '//div[contains(@class, "task")]'))
# print(f"üì¶ –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {task_count}")

results = []
for i in range(1, task_count + 1):
    try:
        print("=" * 80)
        print(f"üìò –ó–∞–¥–∞–Ω–∏–µ {i}")

        base = f'//*[@id="__next"]/div[2]/div/main/div/div[2]/div[2]/div/div[2]/div/div[{i}]'

        number_xpath = base + '/div/div[1]/div[1]/div[1]/div[1]'
        topic_xpath = base + '/div/div[1]/div/div[1]/div[2]/div'
        question_xpath = base + '/div/div[2]/div[1]'
        button_xpath = base + '//button[@data-name="solution"]'
        answer_xpath = base + '//div[contains(@class, "border-2") and contains(@class, "p-4")]'

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –±–ª–æ–∫—É –∑–∞–¥–∞–Ω–∏—è
        task_elem = driver.find_element(By.XPATH, base)
        driver.execute_script("arguments[0].scrollIntoView(true);", task_elem)
        time.sleep(0.5)

        # 1. –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è
        number = driver.find_element(By.XPATH, number_xpath)
        print("üî¢ –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:", number.text)

        # 1.1 –¢–µ–º–∞ –∑–∞–¥–∞–Ω–∏—è (–ø–æ —Ç–µ–∫—Å—Ç—É "–¢–µ–º–∞:")
        try:
            topic_elem = task_elem.find_element(By.XPATH, './/div[contains(text(), "–¢–µ–º–∞:")]')
            topic_text = topic_elem.text.replace("–¢–µ–º–∞:", "").strip()
            print("üìå –¢–µ–º–∞ –∑–∞–¥–∞–Ω–∏—è:", topic_text)
        except Exception as e:
            topic_text = "[–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞]"
            print("‚ö†Ô∏è –¢–µ–º–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", e)

        # 2. –£—Å–ª–æ–≤–∏–µ
        question = driver.find_element(By.XPATH, question_xpath)
        question_text = question.text

        # 2.1 –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            table_elem = question.find_element(By.TAG_NAME, "table")

            # –£–¥–∞–ª–∏–º —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            table_raw_text = table_elem.text
            question_text = question_text.replace(table_raw_text, "").strip()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –∫—Ä–∞—Å–∏–≤–æ
            rows = table_elem.find_elements(By.TAG_NAME, "tr")
            table_lines = []

            for row in rows:
                cells = row.find_elements(By.TAG_NAME, "th") or row.find_elements(By.TAG_NAME, "td")
                line = " | ".join(cell.text.strip() for cell in cells)
                table_lines.append(line)

            table_text = "\n–¢–∞–±–ª–∏—Ü–∞:\n" + "\n".join(table_lines)
            question_text += "\n" + table_text
            print("üìä –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞, –æ—á–∏—â–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        except:
            print("üìä –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        print("üîπ –£—Å–ª–æ–≤–∏–µ:")
        print(question_text)

        # 3. –ö–∞—Ä—Ç–∏–Ω–∫–∏
        images = question.find_elements(By.TAG_NAME, "img")
        image_urls = [img.get_attribute("src") for img in images]
        if image_urls:
            print("üñº –ö–∞—Ä—Ç–∏–Ω–∫–∏:")
            for url in image_urls:
                print(url)
        else:
            print("üñº –ö–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ—Ç")

        # 4. –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"
        try:
            show_answer_btn = driver.find_element(By.XPATH, button_xpath)
            driver.execute_script("arguments[0].scrollIntoView(true);", show_answer_btn)
            time.sleep(0.3)
            driver.execute_script("arguments[0].click();", show_answer_btn)
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")
        except Exception as e:
            print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–†–µ—à–µ–Ω–∏–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–∂–∞–ª–∞—Å—å:", e)

        # 5. –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        try:
            wait = WebDriverWait(driver, 10)

            # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–µ–ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            wait.until(lambda d: d.find_element(By.XPATH, answer_xpath).text.strip() != "")

            answer = driver.find_element(By.XPATH, answer_xpath)
            driver.execute_script("arguments[0].scrollIntoView(true);", answer)
            answer_text = answer.text.strip()
            print("‚úÖ –û—Ç–≤–µ—Ç:")
            print(answer_text)

        except TimeoutException:
            print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: –∏—Å—Ç—ë–∫ —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.")
            answer_text = "[–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω]"
        except Exception as e:
            print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:", e)
            answer_text = "[–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω]"

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è {i}:", e)
    results.append({
    "number": number.text,
    "topic": topic_text,
    "question": question_text,
    "images": image_urls,
    "answer": answer_text
    })

# # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–∂–µ–π—Å–æ–Ω
# with open("tasks.json", "w", encoding="utf-8") as f:
#     json.dump(results, f, ensure_ascii=False, indent=2)
