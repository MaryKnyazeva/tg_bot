import os
import json
import random
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
with open("tasks.json", "r", encoding="utf-8") as f:
    tasks_data = json.load(f)

user_states = {}

def format_table_from_text(raw_text: str) -> str:
    lines = [line.strip() for line in raw_text.strip().splitlines() if line.strip()]
    rows = [line.split("|") for line in lines]
    col_widths = [max(len(cell.strip()) for cell in col) for col in zip(*rows)]

    def format_row(row, sep="‚îÇ"):
        return sep + sep.join(f" {cell.strip():<{w}} " for cell, w in zip(row, col_widths)) + sep

    border_top = "‚îå" + "‚î¨".join("‚îÄ" * (w + 2) for w in col_widths) + "‚îê"
    border_mid = "‚îú" + "‚îº".join("‚îÄ" * (w + 2) for w in col_widths) + "‚î§"
    border_bot = "‚îî" + "‚î¥".join("‚îÄ" * (w + 2) for w in col_widths) + "‚îò"

    table = [border_top, format_row(rows[0])]
    if len(rows) > 1:
        table.append(border_mid)
        for row in rows[1:]:
            table.append(format_row(row))
    table.append(border_bot)

    return "üìä –¢–∞–±–ª–∏—Ü–∞:\n" + "\n".join(table)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    selected = random.choice(tasks_data)
    user_states[user_id] = selected

    await update.message.reply_text(f"üìò –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{selected['number']}:\n\n{selected['question']}")

    if selected.get("images"):
        for url in selected["images"]:
            await update.message.reply_photo(photo=url)

    if "–¢–∞–±–ª–∏—Ü–∞:" in selected["answer"]:
        table_raw = selected["answer"].split("–¢–∞–±–ª–∏—Ü–∞:")[-1].split("–†–µ—à–µ–Ω–∏–µ:")[0].strip()
        pretty_table = format_table_from_text(table_raw)
        await update.message.reply_text(pretty_table)

    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:")

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text.strip()
    correct = user_states.get(user_id, {}).get("answer", "")

    if user_input.lower() in correct.lower():
        reply = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        reply = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n\nüîç –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{correct}"

    selected = random.choice(tasks_data)
    user_states[user_id] = selected

    await update.message.reply_text(reply)
    await update.message.reply_text(f"\nüìò –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{selected['number']}:\n\n{selected['question']}")

    if selected.get("images"):
        for url in selected["images"]:
            await update.message.reply_photo(photo=url)

    if "–¢–∞–±–ª–∏—Ü–∞:" in selected["answer"]:
        table_raw = selected["answer"].split("–¢–∞–±–ª–∏—Ü–∞:")[-1].split("–†–µ—à–µ–Ω–∏–µ:")[0].strip()
        pretty_table = format_table_from_text(table_raw)
        await update.message.reply_text(pretty_table)

    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:")

# üöÄ –°—Ç–∞—Ä—Ç –±–µ–∑ asyncio.run()
if __name__ == "__main__":
    app = ApplicationBuilder().token(os.environ["TOKEN"]).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))

    import asyncio

    async def run_bot():
        await app.initialize()
        await app.start()
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await app.updater.start_polling()
        await app.updater.idle()

    asyncio.get_event_loop().create_task(run_bot())
    asyncio.get_event_loop().run_forever()
